**************************** Docker Compose File *********************************
The Compose file
----------------
The default path for a Compose file is "compose.yaml" (preferred) or "compose.yml" that is placed in the working directory. 
Compose also supports "docker-compose.yaml" and "docker-compose.yml" for backwards compatibility of earlier versions. 
If both files exist, Compose prefers the canonical "compose.yaml".



Controling Commands
---------------------
docker-compose -f custom-compose-file.yml start
docker-compose up
docker-compose up -d - run in the background as a daemon

docker-compose stop - o safely stop the active services, we can use stop, which will preserve containers, volumes, and networks, along with every modification made to them:
docker-compose down - To reset the status of our project, we can simply run down, which will destroy everything with the exception of external volumes:


Important Notes
-----------------

1.
"docker-compose" can be considered a wrapper around the docker CLI (in fact it is another implementation in python as said in the comments) in order to gain time and avoid 500 characters-long lines (and also start multiple containers at the same time). It uses a file called "docker-compose.yml" in order to retrieve parameters.

So basically "docker-compose build" will read your "docker-compose.yml", look for all services containing the "build:" statement and run a "docker build" for each one.
Each build can specify a Dockerfile, a context and args to pass to docker.

To conclude with an example "docker-compose.yml" file:

version: '3.2'

services:
  database:
    image: mariadb
    restart: always
    volumes:
      - ./.data/sql:/var/lib/mysql

  web:
    build:
      dockerfile: Dockerfile-alpine
      context: ./web
    ports:
      - 8099:80
    depends_on:
      - database 

When calling "docker-compose build", only the "web" target will need an image to be built. The "docker build" command would look like:

"docker build -t web_myproject -f Dockerfile-alpine ./web"

2.
# create a directory to work in
mkdir example
cd example

# create an example file
touch somefile.txt

# build an image using the current directory as context
# and a Dockerfile passed through stdin
docker build -t myimage:latest -f- . <<EOF
FROM busybox
COPY somefile.txt ./
RUN cat /somefile.txt
EOF

**********************************************************************************







**************************** Docker *********************************
Important -

1 -
--link option
-------------
The --link option in Docker is a legacy feature that allows you to link one container to another. Although it may eventually be removed,
When you create a link between containers using --link, Docker does the following:
Creates an entry in the /etc/hosts file of the target container (the one being linked to).
Sets environment variables in the target container to provide information about the linked container.
For example, if you link a container named web to a database container named db using --link db:webdb, Docker creates an environment variable WEBDB_NAME=/web/webdb in the web container

Instead of using --link, consider using user-defined networks for communication between containers.

2 -
Stop all/Remove all
-------------------
To stop all the stopped containers at once - docker stop $(docker ps -aq)
To remove all the stopped containers at once, run the command: docker rm $(docker ps -aq)


**********************************************************************

Volumes
--------
$ docker run -d -p 80:80 --name my-apache-php-app -v "$PWD":/var/www/html php:7.2-apache

$ docker build -t my-php-app .
$ docker run -it --rm --name my-running-app my-php-app

docker run -it --rm --name my-running-script -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:8.2-cli php your-script.php

docker run -d -p 80:80 --name my-apache-php-app -v "$PWD":/var/www/html php:7.2-apache

Docker Project
--------------
$ docker build -t my-image .    OR    [ $ docker build -t a11aruna/php-httpd . ]
 # NOTE -
  1 -
  Using the --no-cache Option During Build: When building a Docker image, you can use the --no-cache option to ignore the cache and build the image from scratch. 
  This ensures that no cached layers are used during the build process. For example:

  docker build --no-cache -t my-image .

  2 -
  Clearing the Docker Build Cache: To clear the entire Docker build cache, you can use the docker system prune command. This will remove all unused data, 
  including cached layers. Be cautious when using this command, especially in a CI environment, as it might affect performance:

  docker system prune

$ docker run -dit --rm --name my-app -p 8080:80 my-image <8080[host]:80[container]>
$ docker exec -it 5ac7830317b6 bash
$ docker logs romantic_goldwasser
$ docker run -w /path/to/dir/ -i -t ubuntu pwd

$ docker images
$ docker rmi my-image
$ docker ps
$ docker ps -a
$ docker rm <container-id>
$ docker inspect 7cae09aa0bdb

Project Docker runs
--------------------
docker run -itd --rm --name db --env MARIADB_ROOT_PASSWORD=pass --env MARIADB_USER=test --env MARIADB_PASSWORD=test --env MARIADB_DATABASE=testdb mariadb:latest
docker run -itd --rm --name my-app -p 8080:80 --link db a11aruna/php-httpd:latest
docker run -itd --rm --name phpmyadmin -d -e PMA_ARBITRARY=1 --link db -p 8081:80 phpmyadmin

Publish image
--------------
#Rename docker image
$ docker tag my-image a11aruna/my-image
$ docker login -u a11aruna
$ docker image push a11aruna/my-image
$ docker logout

Docker tag
------------
docker image tag myimage registry-host:5000/myname/myimage:latest
docker image tag myimage registry-host:5000/myname/myimage:v1.0.1
docker image tag myimage registry-host:5000/myname/myimage:v1.0
docker image tag myimage registry-host:5000/myname/myimage:v1

Create image using container
----------------------------
docker container commit c16378f943fe rhel-httpd:latest
docker image tag rhel-httpd:latest registry-host:5000/myadmin/rhel-httpd:latest

Mariadb
--------
# Starting using a minimal configuration
$ docker run --detach --name some-mariadb --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest
or
$ docker run --detach --name some-mariadb --env MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=1  mariadb:latest
or
# where the container logs will contain the generated root password.
$ docker run --detach --name some-mariadb --env MARIADB_RANDOM_ROOT_PASSWORD=1  mariadb:latest

# Starting a MariaDB instance with a user, password, and a database:
$ docker run --detach --name some-mariadb --env MARIADB_USER=example-user --env MARIADB_PASSWORD=my_cool_secret --env MARIADB_DATABASE=exmple-database --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest

# Start a mariadb server instance in a network
# As applications talk to MariaDB, MariaDB needs to start in the same network as the application:
$ docker network create some-network 
$ docker run --detach --network some-network --name some-mariadb --env MARIADB_USER=example-user --env MARIADB_PASSWORD=my_cool_secret --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest
$ docker run --detach --network some-network --name some-application --env APP_DB_HOST=some-mariadb  --env APP_DB_USER=example-user --env APP_DB_PASSWD=my_cool_secret some-application

Composer samples
-------------------
# Use root/example as user/password credentials
version: '3.1'

services:

  db:
    image: mariadb
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: example

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

PHPMYADMIN
-----------
Usage with arbitrary server
docker run --name phpmyadmin -d -e PMA_ARBITRARY=1 -p 8080:80 phpmyadmin

Composer samples
-------------------
version: '3.1'

services:
  db:
    image: mariadb:10.6
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: notSecureChangeMe

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8080:80
    environment:
      - PMA_ARBITRARY=1

Composersample
---------------
version: "3.9"
services:
  # PHP Container
  php-container:
    container_name: php-container
    # Dockerfile path
    build:
      context: .
      dockerfile: mysql.dockerfile  
    volumes:
      # container working directory
      - ./test:/var/www/html  
    ports:
      # Expose PHP on 5000
      - 5000:80  
    depends_on:
      # Make sure the db-container starts before php-container
      - db-container  

  # Database Container
  db-container:
    image: mysql:latest  
    environment:
      # Add MySQL root password
      MYSQL_ROOT_PASSWORD: root_pass  
      # Username password
      MYSQL_PASSWORD: user_password  
      # Test Database
      MYSQL_DATABASE: sample_db  
      # Database username
      MYSQL_USER: sample_db_user  
    ports:
      - "3306:3306"  

https://thriveread.com/run-docker-php-ext-install-mysqli/
https://github.com/docker-library/mysql/issues/275
https://docs.docker.com/reference/cli/docker/container/run/
https://github.com/docker/awesome-compose/blob/master/nginx-aspnet-mysql/compose.yaml



docker image push registry-host:5000/myadmin/rhel-httpd:latest
#Check here for more infp
# https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
# https://docs.docker.com/reference/dockerfile/#env
