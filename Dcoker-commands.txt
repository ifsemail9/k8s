**************************** Docker *********************************

To stop all the stopped containers at once - docker stop $(docker ps -aq)

To remove all the stopped containers at once, run the command: docker rm $(docker ps -aq)


**********************************************************************


$ docker build -t my-php-app .
$ docker run -it --rm --name my-running-app my-php-app

docker run -it --rm --name my-running-script -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:8.2-cli php your-script.php

docker run -d -p 80:80 --name my-apache-php-app -v "$PWD":/var/www/html php:7.2-apache

Docker Project
--------------
$ docker build -t my-image .    OR    [ $ docker build -t a11aruna/php-httpd . ]
$ docker run -dit --rm --name my-app -p 8080:80 my-image <8080[host]:80[container]>
$ docker exec -it 5ac7830317b6 bash
$ docker logs romantic_goldwasser

$ docker images
$ docker rmi my-image
$ docker ps
$ docker ps -a
$ docker rm <container-id>
$ docker inspect 7cae09aa0bdb

Project Docker runs
--------------------
docker run -dit --rm --name my-app -p 8080:80 a11aruna/php-httpd:latest
docker run -itd --rm --name db --env MARIADB_ROOT_PASSWORD=pass  mariadb:latest
docker run -itd --rm --name phpmyadmin -d -e PMA_ARBITRARY=1 --link db -p 8081:80 phpmyadmin

Publish image
--------------
#Rename docker image
$ docker tag my-image a11aruna/my-image
$ docker login -u a11aruna
$ docker image push a11aruna/my-image
$ docker logout

Docker tag
------------
docker image tag myimage registry-host:5000/myname/myimage:latest
docker image tag myimage registry-host:5000/myname/myimage:v1.0.1
docker image tag myimage registry-host:5000/myname/myimage:v1.0
docker image tag myimage registry-host:5000/myname/myimage:v1

Create image using container
----------------------------
docker container commit c16378f943fe rhel-httpd:latest
docker image tag rhel-httpd:latest registry-host:5000/myadmin/rhel-httpd:latest

Mariadb
--------
# Starting using a minimal configuration
$ docker run --detach --name some-mariadb --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest
or
$ docker run --detach --name some-mariadb --env MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=1  mariadb:latest
or
$ docker run --detach --name some-mariadb --env MARIADB_RANDOM_ROOT_PASSWORD=1  mariadb:latest

# Starting a MariaDB instance with a user, password, and a database:
$ docker run --detach --name some-mariadb --env MARIADB_USER=example-user --env MARIADB_PASSWORD=my_cool_secret --env MARIADB_DATABASE=exmple-database --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest

# Start a mariadb server instance in a network
# As applications talk to MariaDB, MariaDB needs to start in the same network as the application:
$ docker network create some-network 
$ docker run --detach --network some-network --name some-mariadb --env MARIADB_USER=example-user --env MARIADB_PASSWORD=my_cool_secret --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest
$ docker run --detach --network some-network --name some-application --env APP_DB_HOST=some-mariadb  --env APP_DB_USER=example-user --env APP_DB_PASSWD=my_cool_secret some-application

Composer samples
-------------------
# Use root/example as user/password credentials
version: '3.1'

services:

  db:
    image: mariadb
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: example

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

PHPMYADMIN
-----------
Usage with arbitrary server
docker run --name phpmyadmin -d -e PMA_ARBITRARY=1 -p 8080:80 phpmyadmin

Composer samples
-------------------
version: '3.1'

services:
  db:
    image: mariadb:10.6
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: notSecureChangeMe

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8080:80
    environment:
      - PMA_ARBITRARY=1








docker image push registry-host:5000/myadmin/rhel-httpd:latest
#Check here for more infp
# https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
# https://docs.docker.com/reference/dockerfile/#env
